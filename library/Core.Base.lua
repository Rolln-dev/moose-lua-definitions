---@meta

---<img src="https://flightcontrol-master.github.io/MOOSE_DOCS_DEVELOP/Images/Core_Base.JPG" width="100%">
---
---**Core** - The base class within the framework.
---
---===
---
---## Features:
---
---  * The construction and inheritance of MOOSE classes.
---  * The class naming and numbering system.
---  * The class hierarchy search system.
---  * The tracing of information or objects during mission execution for debugging purposes.
---  * The subscription to DCS events for event handling in MOOSE objects.
---  * Object inspection.
---
---===
---
---All classes within the MOOSE framework are derived from the BASE class.
---Note: The BASE class is an abstract class and is not meant to be used directly.
---
---===
---
---### Author: **FlightControl**
---### Contributions:
---
---===
---BASE class
---
---# 1.
---BASE constructor.
---
---Any class derived from BASE, will use the Core.Base#BASE.New constructor embedded in the Core.Base#BASE.Inherit method.
---See an example at the Core.Base#BASE.New method how this is done.
---
---# 2. Trace information for debugging.
---
---The BASE class contains trace methods to trace progress within a mission execution of a certain object.
---These trace methods are inherited by each MOOSE class inheriting BASE, thus all objects created from
---a class derived from BASE can use the tracing methods to trace its execution.
---
---Any type of information can be passed to these tracing methods. See the following examples:
---
---    self:E( "Hello" )
---
---Result in the word "Hello" in the dcs.log.
---
---    local Array = { 1, nil, "h", { "a","b" }, "x" }
---    self:E( Array )
---
---Results with the text [1]=1,[3]="h",[4]={[1]="a",[2]="b"},[5]="x"} in the dcs.log.
---
---    local Object1 = "Object1"
---    local Object2 = 3
---    local Object3 = { Object 1, Object 2 }
---    self:E( { Object1, Object2, Object3 } )
---
---Results with the text [1]={[1]="Object",[2]=3,[3]={[1]="Object",[2]=3}} in the dcs.log.
---
---    local SpawnObject = SPAWN:New( "Plane" )
---    local GroupObject = GROUP:FindByName( "Group" )
---    self:E( { Spawn = SpawnObject, Group = GroupObject } )
---
---Results with the text [1]={Spawn={....),Group={...}} in the dcs.log.
---
---Below a more detailed explanation of the different method types for tracing.
---
---## 2.1. Tracing methods categories.
---
---There are basically 3 types of tracing methods available:
---
---  * #BASE.F: Used to trace the entrance of a function and its given parameters. An F is indicated at column 44 in the DCS.log file.
---  * #BASE.T: Used to trace further logic within a function giving optional variables or parameters. A T is indicated at column 44 in the DCS.log file.
---  * #BASE.E: Used to always trace information giving optional variables or parameters. An E is indicated at column 44 in the DCS.log file.
---
---## 2.2 Tracing levels.
---
---There are 3 tracing levels within MOOSE.
---These tracing levels were defined to avoid bulks of tracing to be generated by lots of objects.
---
---As such, the F and T methods have additional variants to trace level 2 and 3 respectively:
---
---  * #BASE.F2: Trace the beginning of a function and its given parameters with tracing level 2.
---  * #BASE.F3: Trace the beginning of a function and its given parameters with tracing level 3.
---  * #BASE.T2: Trace further logic within a function giving optional variables or parameters with tracing level 2.
---  * #BASE.T3: Trace further logic within a function giving optional variables or parameters with tracing level 3.
---
---## 2.3. Trace activation.
---
---Tracing can be activated in several ways:
---
---  * Switch tracing on or off through the #BASE.TraceOnOff() method.
---  * Activate all tracing through the #BASE.TraceAll() method.
---  * Activate only the tracing of a certain class (name) through the #BASE.TraceClass() method.
---  * Activate only the tracing of a certain method of a certain class through the #BASE.TraceClassMethod() method.
---  * Activate only the tracing of a certain level through the #BASE.TraceLevel() method.
---
---## 2.4. Check if tracing is on.
---
---The method #BASE.IsTrace() will validate if tracing is activated or not.
---
---# 3. DCS simulator Event Handling.
---
---The BASE class provides methods to catch DCS Events. These are events that are triggered from within the DCS simulator,
---and handled through lua scripting. MOOSE provides an encapsulation to handle these events more efficiently.
---
---## 3.1. Subscribe / Unsubscribe to DCS Events.
---
---At first, the mission designer will need to **Subscribe** to a specific DCS event for the class.
---So, when the DCS event occurs, the class will be notified of that event.
---There are two methods which you use to subscribe to or unsubscribe from an event.
---
---  * #BASE.HandleEvent(): Subscribe to a DCS Event.
---  * #BASE.UnHandleEvent(): Unsubscribe from a DCS Event.
---
---## 3.2. Event Handling of DCS Events.
---
---Once the class is subscribed to the event, an **Event Handling** method on the object or class needs to be written that will be called
---when the DCS event occurs. The Event Handling method receives an Core.Event#EVENTDATA structure, which contains a lot of information
---about the event that occurred.
---
---Find below an example of the prototype how to write an event handling function for two units:
---
---     local Tank1 = UNIT:FindByName( "Tank A" )
---     local Tank2 = UNIT:FindByName( "Tank B" )
---
---     -- Here we subscribe to the Dead events. So, if one of these tanks dies, the Tank1 or Tank2 objects will be notified.
---     Tank1:HandleEvent( EVENTS.Dead )
---     Tank2:HandleEvent( EVENTS.Dead )
---
---     --- This function is an Event Handling function that will be called when Tank1 is Dead.
---     -- @param Wrapper.Unit#UNIT self
---     -- @param Core.Event#EVENTDATA EventData
---     function Tank1:OnEventDead( EventData )
---
---       self:SmokeGreen()
---     end
---
---     --- This function is an Event Handling function that will be called when Tank2 is Dead.
---     -- @param Wrapper.Unit#UNIT self
---     -- @param Core.Event#EVENTDATA EventData
---     function Tank2:OnEventDead( EventData )
---
---       self:SmokeBlue()
---     end
---
---See the Core.Event module for more information about event handling.
---
---# 4. Class identification methods.
---
---BASE provides methods to get more information of each object:
---
---  * #BASE.GetClassID(): Gets the ID (number) of the object. Each object created is assigned a number, that is incremented by one.
---  * #BASE.GetClassName(): Gets the name of the object, which is the name of the class the object was instantiated from.
---  * #BASE.GetClassNameAndID(): Gets the name and ID of the object.
---
---# 5. All objects derived from BASE can have "States".
---
---A mechanism is in place in MOOSE, that allows to let the objects administer **states**.
---States are essentially properties of objects, which are identified by a **Key** and a **Value**.
---
---The method #BASE.SetState() can be used to set a Value with a reference Key to the object.
---To **read or retrieve** a state Value based on a Key, use the #BASE.GetState method.
---
---These two methods provide a very handy way to keep state at long lasting processes.
---Values can be stored within the objects, and later retrieved or changed when needed.
---There is one other important thing to note, the #BASE.SetState() and #BASE.GetState methods
---receive as the **first parameter the object for which the state needs to be set**.
---Thus, if the state is to be set for the same object as the object for which the method is used, then provide the same
---object name to the method.
---
---# 6. Inheritance.
---
---The following methods are available to implement inheritance
---
---  * #BASE.Inherit: Inherits from a class.
---  * #BASE.GetParent: Returns the parent object from the object it is handling, or nil if there is no parent object.
---
---===
---Base class of everything
---@class BASE 
---@field ClassID number The ID number of the class.
---@field ClassName string The name of the class.
---@field ClassNameAndID string The name of the class concatenated with the ID number of the class.
---@field Scheduler SCHEDULER The scheduler object.
---@field _ table 
---@field __ table 
BASE = {}

---Clear the state of an object.
---
------
---@param self BASE 
---@param Object NOTYPE The object that holds the Value set by the Key.
---@param StateName NOTYPE The key that is should be cleared.
function BASE:ClearState(Object, StateName) end

---Creation of a Birth Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
---@param IniUnitName string The initiating unit name.
---@param place NOTYPE 
---@param subplace NOTYPE 
function BASE:CreateEventBirth(EventTime, Initiator, IniUnitName, place, subplace) end

---Creation of a Crash Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
---@param IniObjectCategory NOTYPE 
function BASE:CreateEventCrash(EventTime, Initiator, IniObjectCategory) end

---Creation of a Dead Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
---@param IniObjectCategory NOTYPE 
function BASE:CreateEventDead(EventTime, Initiator, IniObjectCategory) end

---Creation of a S_EVENT_DYNAMIC_CARGO_LOADED event.
---
------
---@param self BASE 
---@param DynamicCargo DYNAMICCARGO the dynamic cargo object
function BASE:CreateEventDynamicCargoLoaded(DynamicCargo) end

---Creation of a S_EVENT_DYNAMIC_CARGO_REMOVED event.
---
------
---@param self BASE 
---@param DynamicCargo DYNAMICCARGO the dynamic cargo object
function BASE:CreateEventDynamicCargoRemoved(DynamicCargo) end

---Creation of a S_EVENT_DYNAMIC_CARGO_UNLOADED event.
---
------
---@param self BASE 
---@param DynamicCargo DYNAMICCARGO the dynamic cargo object
function BASE:CreateEventDynamicCargoUnloaded(DynamicCargo) end

---Creation of a S_EVENT_NEW_DYNAMIC_CARGO event.
---
------
---@param self BASE 
---@param DynamicCargo DYNAMICCARGO the dynamic cargo object
function BASE:CreateEventNewDynamicCargo(DynamicCargo) end

---Creation of a `S_EVENT_PLAYER_ENTER_AIRCRAFT` event.
---
------
---@param self BASE 
---@param PlayerUnit UNIT The aircraft unit the player entered.
function BASE:CreateEventPlayerEnterAircraft(PlayerUnit) end

---Creation of a Remove Unit Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
function BASE:CreateEventRemoveUnit(EventTime, Initiator) end

---Creation of a Takeoff Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
function BASE:CreateEventTakeoff(EventTime, Initiator) end

---Creation of a Crash Event.
---
------
---@param self BASE 
---@param EventTime Time The time stamp of the event.
---@param Initiator Object The initiating object of the event.
function BASE:CreateEventUnitLost(EventTime, Initiator) end

---Log an exception which will be traced always.
---Can be anywhere within the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:E(Arguments) end

---Returns the event dispatcher
---
------
---@param self BASE 
---@return EVENT #
function BASE:EventDispatcher() end

---Remove all subscribed events
---
------
---@param self BASE 
---@return BASE #
function BASE:EventRemoveAll() end

---Trace a function call.
---Must be at the beginning of the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:F(Arguments) end

---Trace a function call level 2.
---Must be at the beginning of the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:F2(Arguments) end

---Trace a function call level 3.
---Must be at the beginning of the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:F3(Arguments) end

---Get the ClassID of the class instance.
---
------
---@param self BASE 
---@return string #The ClassID of the class instance.
function BASE:GetClassID() end

---Get the ClassName of the class instance.
---
------
---@param self BASE 
---@return string #The ClassName of the class instance.
function BASE:GetClassName() end

---Get the ClassName + ClassID of the class instance.
---The ClassName + ClassID is formatted as '%s#%09d'.
---
------
---@param self BASE 
---@return string #The ClassName + ClassID of the class instance.
function BASE:GetClassNameAndID() end

---Get the Class Core.Event processing Priority.
---The Event processing Priority is a number from 1 to 10,
---reflecting the order of the classes subscribed to the Event to be processed.
---
------
---@param self BASE 
---@return number #The @{Core.Event} processing Priority.
function BASE:GetEventPriority() end

---This is the worker method to retrieve the Parent class.
---Note that the Parent class must be passed to call the parent class method.
---
---    self:GetParent(self):ParentMethod()
---
------
---@param self BASE 
---@param Child BASE This is the Child class from which the Parent class needs to be retrieved.
---@param FromClass? BASE (Optional) The class from which to get the parent.
---@return BASE #
function BASE:GetParent(Child, FromClass) end

---Get all of the properties of an object in a table.
---
------
---@param self BASE 
---@return table #of values, indexed by keys.
function BASE:GetProperties() end

---Get one property of an object by the key.
---
------
---@param self BASE 
---@param Key NOTYPE The key that is used as a reference of the value. Note that the key can be a #string, but it can also be any other type!
---@return  #Value The value that is stored. Note that the value can be a #string, but it can also be any other type! Nil if not found.         
function BASE:GetProperty(Key) end

---Get a Value given a Key from the Object.
---Note that if the Object is destroyed, set to nil, or garbage collected, then the Values and Keys will also be gone.
---
------
---@param self BASE 
---@param Object NOTYPE The object that holds the Value set by the Key.
---@param Key NOTYPE The key that is used to retrieve the value. Note that the key can be a #string, but it can also be any other type!
---@return  #The Value retrieved or nil if the Key was not found and thus the Value could not be retrieved.
function BASE:GetState(Object, Key) end

---Subscribe to a DCS Event.
---
------
---@param self BASE 
---@param EventID EVENTS Event ID.
---@param EventFunction? function (optional) The function to be called when the event occurs for the unit.
---@return BASE #
function BASE:HandleEvent(EventID, EventFunction) end

---Log an information which will be traced always.
---Can be anywhere within the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:I(Arguments) end

---This is the worker method to inherit from a parent class.
---
------
---@param self BASE 
---@param Child NOTYPE is the Child class that inherits.
---@param Parent BASE is the Parent class that the Child inherits from.
---@return BASE #Child
function BASE:Inherit(Child, Parent) end

---This is the worker method to check if an object is an (sub)instance of a class.
---
---### Examples:
---
---   * ZONE:New( 'some zone' ):IsInstanceOf( ZONE ) will return true
---   * ZONE:New( 'some zone' ):IsInstanceOf( 'ZONE' ) will return true
---   * ZONE:New( 'some zone' ):IsInstanceOf( 'zone' ) will return true
---   * ZONE:New( 'some zone' ):IsInstanceOf( 'BASE' ) will return true
---
---   * ZONE:New( 'some zone' ):IsInstanceOf( 'GROUP' ) will return false
---
------
---@param self BASE 
---@param ClassName NOTYPE is the name of the class or the class itself to run the check against
---@return boolean #
function BASE:IsInstanceOf(ClassName) end

---Enquires if tracing is on (for the class).
---
------
---@param self BASE 
---@return boolean #
function BASE:IsTrace() end

---BASE constructor.
---
---This is an example how to use the BASE:New() constructor in a new class definition when inheriting from BASE.
---
---    function EVENT:New()
---      local self = BASE:Inherit( self, BASE:New() ) -- #EVENT
---      return self
---    end
---
------
---@param self BASE 
---@return BASE #
function BASE:New() end

---Occurs when an Event for an object is triggered.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that triggered the event.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEvent(EventData) end

---BDA.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventBDA(EventData) end

---Occurs when a ground unit captures either an airbase or a farp.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that captured the base
---place: The airbase that was captured, can be a FARP or Airbase. When calling place:getCoalition() the faction will already be the new owning faction.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventBaseCaptured(EventData) end

---Occurs when any object is spawned into the mission.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that was spawned
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventBirth(EventData) end

---Occurs when any aircraft crashes into the ground and is completely destroyed.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that has crashed
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventCrash(EventData) end

---Occurs when an object is dead.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is dead.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDead(EventData) end

---Unknown precisely what creates this event, likely tied into newer damage model.
---Will update this page when new information become available.
---
---* initiator: The unit that had the failure.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDetailedFailure(EventData) end

---Discard chair after ejection.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDiscardChairAfterEjection(EventData) end

---Occurs when a player loads a dynamic cargo object with the F8 ground crew menu into a helo.
---*** NOTE *** this is a workarounf for DCS not creating these events as of Aug 2024.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDynamicCargoLoaded(EventData) end

---Occurs when a dynamic cargo crate is removed.
---*** NOTE *** this is a workarounf for DCS not creating these events as of Aug 2024.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDynamicCargoRemoved(EventData) end

---Occurs when a player unloads a dynamic cargo object with the F8 ground crew menu from a helo.
---*** NOTE *** this is a workarounf for DCS not creating these events as of Aug 2024.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventDynamicCargoUnloaded(EventData) end

---Occurs when a pilot ejects from an aircraft
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that has ejected
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventEjection(EventData) end

---Occurs when any aircraft shuts down its engines.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is stopping its engines.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventEngineShutdown(EventData) end

---Occurs when any aircraft starts its engines.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is starting its engines.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventEngineStartup(EventData) end

---Occurs whenever an object is hit by a weapon.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit object the fired the weapon
---weapon: Weapon object that hit the target
---target: The Object that was hit.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventHit(EventData) end

---Occurs when any system fails on a human controlled aircraft.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that had the failure
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventHumanFailure(EventData) end

---Occurs on the death of a unit.
---Contains more and different information. Similar to unit_lost it will occur for aircraft before the aircraft crash event occurs.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
---* initiator: The unit that killed the target
---* target: Target Object
---* weapon: Weapon Object
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventKill(EventData) end

---Occurs when an aircraft lands at an airbase, farp or ship
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that has landed
---place: Object that the unit landed on. Can be an Airbase Object, FARP, or Ships
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventLand(EventData) end

---Occurs shortly after the landing animation of an ejected pilot touching the ground and standing up.
---Event does not occur if the pilot lands in the water and sub combs to Davey Jones Locker.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
---* initiator: Static object representing the ejected pilot. Place : Aircraft that the pilot ejected from.
---* place: may not return as a valid object if the aircraft has crashed into the ground and no longer exists.
---* subplace: is always 0 for unknown reasons.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventLandingAfterEjection(EventData) end

---Landing quality mark.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventLandingQualityMark(EventData) end

---Occurs when a new mark was added.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---MarkID: ID of the mark.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventMarkAdded(EventData) end

---Occurs when a mark text was changed.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---MarkID: ID of the mark.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventMarkChange(EventData) end

---Occurs when a mark was removed.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---MarkID: ID of the mark.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventMarkRemoved(EventData) end

---Occurs when a mission ends
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventMissionEnd(EventData) end

---Occurs when a mission starts
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventMissionStart(EventData) end

---Occurs when a player creates a dynamic cargo object from the F8 ground crew menu.
---*** NOTE *** this is a workarounf for DCS not creating these events as of Aug 2024.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventNewDynamicCargo(EventData) end

---Weapon add.
---Fires when entering a mission per pylon with the name of the weapon (double pylons not counted, infinite wep reload not counted.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventParatrooperLanding(EventData) end

---Occurs when the pilot of an aircraft is killed.
---Can occur either if the player is alive and crashes or if a weapon kills the pilot without completely destroying the plane.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that the pilot has died in.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventPilotDead(EventData) end

---Occurs when a player enters a slot and takes control of an aircraft.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---**NOTE**: This is a workaround of a long standing DCS bug with the PLAYER_ENTER_UNIT event. 
---initiator : The unit that is being taken control of.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventPlayerEnterAircraft(EventData) end

---Occurs when any player assumes direct control of a unit.
---Note - not Mulitplayer safe. Use PlayerEnterAircraft.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is being taken control of.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventPlayerEnterUnit(EventData) end

---Occurs when any player relieves control of a unit to the AI.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that the player left.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventPlayerLeaveUnit(EventData) end

---Occurs when an aircraft connects with a tanker and begins taking on fuel.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is receiving fuel.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventRefueling(EventData) end

---Occurs when an aircraft is finished taking fuel.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that was receiving fuel.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventRefuelingStop(EventData) end

---Occurs when any modification to the "Score" as seen on the debrief menu would occur.
---There is no information on what values the score was changed to. Event is likely similar to player_comment in this regard.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventScore(EventData) end

---Occurs when any unit stops firing its weapon.
---Event will always correspond with a shooting start event.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that was doing the shooting.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventShootingEnd(EventData) end

---Occurs when any unit begins firing a weapon that has a high rate of fire.
---Most common with aircraft cannons (GAU-8), autocannons, and machine guns.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that is doing the shooting.
---target: The unit that is being targeted.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventShootingStart(EventData) end

---Occurs whenever any unit in a mission fires a weapon.
---But not any machine gun or autocannon based weapon, those are handled by EVENT.ShootingStart.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventShot(EventData) end

---Occurs when an aircraft takes off from an airbase, farp, or ship.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---initiator : The unit that tookoff
---place: Object from where the AI took-off from. Can be an Airbase Object, FARP, or Ships
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventTakeoff(EventData) end

---Trigger zone.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventTriggerZone(EventData) end

---Occurs when the game thinks an object is destroyed.
---Have a look at the class Core.Event#EVENT as these are just the prototypes.
---
---* initiator: The unit that is was destroyed.
---
------
---@param self BASE 
---@param EventData EVENTDATA The EventData structure.
function BASE:OnEventUnitLost(EventData) end

---Schedule a new time event.
---Note that the schedule will only take place if the scheduler is *started*. Even for a single schedule event, the scheduler needs to be started also.
---
------
---@param self BASE 
---@param Start number Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.
---@param SchedulerFunction function The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.
---@param ... NOTYPE Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, ... }.
---@return string #The Schedule ID of the planned schedule.
function BASE:ScheduleOnce(Start, SchedulerFunction, ...) end

---Schedule a new time event.
---Note that the schedule will only take place if the scheduler is *started*. Even for a single schedule event, the scheduler needs to be started also.
---
------
---@param self BASE 
---@param Start number Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.
---@param Repeat number Specifies the interval in seconds when the scheduler will call the event function.
---@param RandomizeFactor number Specifies a randomization factor between 0 and 1 to randomize the Repeat.
---@param Stop number Specifies the amount of seconds when the scheduler will be stopped.
---@param SchedulerFunction function The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.
---@param ... table Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, ... }.
---@return string #The Schedule ID of the planned schedule.
function BASE:ScheduleRepeat(Start, Repeat, RandomizeFactor, Stop, SchedulerFunction, ...) end

---Stops the Schedule.
---
------
---@param self BASE 
---@param SchedulerID? string (Optional) Scheduler ID to be stopped. If nil, all pending schedules are stopped.
function BASE:ScheduleStop(SchedulerID) end

---Set the Class Core.Event processing Priority.
---The Event processing Priority is a number from 1 to 10,
---reflecting the order of the classes subscribed to the Event to be processed.
---
------
---@param self BASE 
---@param EventPriority number The @{Core.Event} processing Priority.
---@return BASE #self
function BASE:SetEventPriority(EventPriority) end

---Set one property of an object.
---
------
---@param self BASE 
---@param Key NOTYPE The key that is used as a reference of the value. Note that the key can be a #string, but it can also be any other type!
---@param Value NOTYPE The value that is stored. Note that the value can be a #string, but it can also be any other type!
function BASE:SetProperty(Key, Value) end

---Set a state or property of the Object given a Key and a Value.
---Note that if the Object is destroyed, set to nil, or garbage collected, then the Values and Keys will also be gone.
---
------
---@param self BASE 
---@param Object NOTYPE The object that will hold the Value set by the Key.
---@param Key NOTYPE The key that is used as a reference of the value. Note that the key can be a #string, but it can also be any other type!
---@param Value NOTYPE The value to is stored in the object.
---@return  #The Value set. 
function BASE:SetState(Object, Key, Value) end

---Trace a function logic level 1.
---Can be anywhere within the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:T(Arguments) end

---Trace a function logic level 2.
---Can be anywhere within the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:T2(Arguments) end

---Trace a function logic level 3.
---Can be anywhere within the function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
function BASE:T3(Arguments) end

---Trace all methods in MOOSE
---
------
---@param self BASE 
---@param TraceAll boolean true = trace all methods in MOOSE.
function BASE:TraceAll(TraceAll) end

---Set tracing for a class
---
------
---@param self BASE 
---@param Class string Class name.
function BASE:TraceClass(Class) end

---Set tracing for a specific method of  class
---
------
---@param self BASE 
---@param Class string Class name.
---@param Method string Method.
function BASE:TraceClassMethod(Class, Method) end

---Set trace level
---
------
---@param self BASE 
---@param Level number 
function BASE:TraceLevel(Level) end

---Set trace off.
---
------
---
---USAGE
---```
----- Switch the tracing Off
---BASE:TraceOff()
---```
------
---@param self BASE 
function BASE:TraceOff() end

---Set trace on.
---
------
---
---USAGE
---```
----- Switch the tracing On
---BASE:TraceOn()
---```
------
---@param self BASE 
function BASE:TraceOn() end

---Set trace on or off
---Note that when trace is off, no BASE.Debug statement is performed, increasing performance!
---When Moose is loaded statically, (as one file), tracing is switched off by default.
---So tracing must be switched on manually in your mission if you are using Moose statically.
---When moose is loading dynamically (for moose class development), tracing is switched on by default.
---
------
---
---USAGE
---```
---
---  -- Switch the tracing On
---  BASE:TraceOnOff( true )
---
---  -- Switch the tracing Off
---  BASE:TraceOnOff( false )
---```
------
---@param self BASE 
---@param TraceOnOff boolean Switch the tracing on or off.
function BASE:TraceOnOff(TraceOnOff) end

---UnSubscribe to a DCS event.
---
------
---@param self BASE 
---@param EventID EVENTS Event ID.
---@return BASE #
function BASE:UnHandleEvent(EventID) end

---Trace a function call.
---This function is private.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
---@param DebugInfoCurrentParam NOTYPE 
---@param DebugInfoFromParam NOTYPE 
function BASE:_F(Arguments, DebugInfoCurrentParam, DebugInfoFromParam) end

---(Internal) Serialize arguments
---
------
---@param self BASE 
---@param Arguments table 
---@return string #Text
function BASE:_Serialize(Arguments) end

---Trace a function logic.
---
------
---@param self BASE 
---@param Arguments NOTYPE A #table or any field.
---@param DebugInfoCurrentParam NOTYPE 
---@param DebugInfoFromParam NOTYPE 
function BASE:_T(Arguments, DebugInfoCurrentParam, DebugInfoFromParam) end

---The main event handling function...
---This function captures all events generated for the class.
---
------
---@param self BASE 
---@param event Event 
---@private
function BASE:onEvent(event) end



