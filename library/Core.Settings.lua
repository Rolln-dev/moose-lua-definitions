---@meta

---<img src="https://flightcontrol-master.github.io/MOOSE_DOCS_DEVELOP/Images/Core_Settings.JPG" width="100%">
---
---**Core** - Manages various settings for missions, providing a menu for players to tweak settings in running missions.
---
---===
---
---## Features:
---
---  * Provide a settings menu system to the players.
---  * Provide a player settings menu and an overall mission settings menu.
---  * Mission settings provide default settings, while player settings override mission settings.
---  * Provide a menu to select between different coordinate formats for A2G coordinates.
---  * Provide a menu to select between different coordinate formats for A2A coordinates.
---  * Provide a menu to select between different message time duration options.
---  * Provide a menu to select between different metric systems.
---
---===
---
---The documentation of the SETTINGS class can be found further in this document.
---
---===
---
---# **AUTHORS and CONTRIBUTIONS**
---
---### Contributions:
---
---### Authors:
---
---  * **FlightControl**: Design & Programming
---Takes care of various settings that influence the behavior of certain functionalities and classes within the MOOSE framework.
---
---===
---
---The SETTINGS class takes care of various settings that influence the behavior of certain functionalities and classes within the MOOSE framework.
---SETTINGS can work on 2 levels:
---
---  - **Default settings**: A running mission has **Default settings**.
---  - **Player settings**: For each player its own **Player settings** can be defined, overriding the **Default settings**.
---
---So, when there isn't any **Player setting** defined for a player for a specific setting, or, the player cannot be identified, the **Default setting** will be used instead.
---
---# 1) \_SETTINGS object
---
---MOOSE defines by default a singleton object called **\_SETTINGS**. Use this object to modify all the **Default settings** for a running mission.
---For each player, MOOSE will automatically allocate also a **player settings** object, and will expose a radio menu to allow the player to adapt the settings to his own preferences.
---
---# 2) SETTINGS Menu
---
---Settings can be adapted by the Players and by the Mission Administrator through **radio menus, which are automatically available in the mission**.
---These menus can be found **on level F10 under "Settings"**. There are two kinds of menus generated by the system.
---
---## 2.1) Default settings menu
---
---A menu is created automatically per Command Center that allows to modify the **Default** settings.
---So, when joining a CC unit, a menu will be available that allows to change the settings parameters **FOR ALL THE PLAYERS**!
---Note that the **Default settings** will only be used when a player has not chosen its own settings.
---
---## 2.2) Player settings menu
---
---A menu is created automatically per Player Slot (group) that allows to modify the **Player** settings.
---So, when joining a slot, a menu wil be available that allows to change the settings parameters **FOR THE PLAYER ONLY**!
---Note that when a player has not chosen a specific setting, the **Default settings** will be used.
---
---## 2.3) Show or Hide the Player Setting menus
---
---Of course, it may be required not to show any setting menus. In this case, a method is available on the **\_SETTINGS object**.
---Use #SETTINGS.SetPlayerMenuOff() to hide the player menus, and use #SETTINGS.SetPlayerMenuOn() show the player menus.
---Note that when this method is used, any player already in a slot will not have its menus visibility changed.
---The option will only have effect when a player enters a new slot or changes a slot.
---
---Example:
---
---     _SETTINGS:SetPlayerMenuOff() -- will disable the player menus.
---     _SETTINGS:SetPlayerMenuOn() -- will enable the player menus.
---     -- But only when a player exits and reenters the slot these settings will have effect!
---
---
---# 3) Settings
---
---There are different settings that are managed and applied within the MOOSE framework.
---See below a comprehensive description of each.
---
---## 3.1) **A2G coordinates** display formatting
---
---### 3.1.1) A2G coordinates setting **types**
---
---Will customize which display format is used to indicate A2G coordinates in text as part of the Command Center communications.
---
---  - A2G BR: [Bearing Range](https://en.wikipedia.org/wiki/Bearing_\(navigation\)).
---  - A2G MGRS: The [Military Grid Reference System](https://en.wikipedia.org/wiki/Military_Grid_Reference_System). The accuracy can also be adapted.
---  - A2G LL DMS: Latitude Longitude [Degrees Minutes Seconds](https://en.wikipedia.org/wiki/Geographic_coordinate_conversion). The accuracy can also be adapted.
---  - A2G LL DDM: Latitude Longitude [Decimal Degrees Minutes](https://en.wikipedia.org/wiki/Decimal_degrees). The accuracy can also be adapted.
---
---### 3.1.2) A2G coordinates setting **menu**
---
---The settings can be changed by using the **Default settings menu** on the Command Center or the **Player settings menu** on the Player Slot.
---
---### 3.1.3) A2G coordinates setting **methods**
---
---There are different methods that can be used to change the **System settings** using the \_SETTINGS object.
---
---  - #SETTINGS.SetA2G_BR(): Enable the BR display formatting by default.
---  - #SETTINGS.SetA2G_MGRS(): Enable the MGRS display formatting by default. Use #SETTINGS.SetMGRS_Accuracy() to adapt the accuracy of the MGRS formatting.
---  - #SETTINGS.SetA2G_LL_DMS(): Enable the LL DMS display formatting by default. Use #SETTINGS.SetLL_Accuracy() to adapt the accuracy of the Seconds formatting.
---  - #SETTINGS.SetA2G_LL_DDM(): Enable the LL DDM display formatting by default. Use #SETTINGS.SetLL_Accuracy() to adapt the accuracy of the Seconds formatting.
---
---### 3.1.4) A2G coordinates setting - additional notes
---
---One additional note on BR. In a situation when a BR coordinate should be given,
---but there isn't any player context (no player unit to reference from), the MGRS formatting will be applied!
---
---## 3.2) **A2A coordinates** formatting
---
---### 3.2.1) A2A coordinates setting **types**
---
---Will customize which display format is used to indicate A2A coordinates in text as part of the Command Center communications.
---
---  - A2A BRAA: [Bearing Range Altitude Aspect](https://en.wikipedia.org/wiki/Bearing_\(navigation\)).
---  - A2A MGRS: The [Military Grid Reference System](https://en.wikipedia.org/wiki/Military_Grid_Reference_System). The accuracy can also be adapted.
---  - A2A LL DMS: Lattitude Longitude [Degrees Minutes Seconds](https://en.wikipedia.org/wiki/Geographic_coordinate_conversion). The accuracy can also be adapted.
---  - A2A LL DDM: Lattitude Longitude [Decimal Degrees and Minutes](https://en.wikipedia.org/wiki/Decimal_degrees). The accuracy can also be adapted.
---  - A2A BULLS: [Bullseye](http://falcon4.wikidot.com/concepts:bullseye).
---
---### 3.2.2) A2A coordinates setting **menu**
---
---The settings can be changed by using the **Default settings menu** on the Command Center or the **Player settings menu** on the Player Slot.
---
---### 3.2.3) A2A coordinates setting **methods**
---
---There are different methods that can be used to change the **System settings** using the \_SETTINGS object.
---
---  - #SETTINGS.SetA2A_BRAA(): Enable the BR display formatting by default.
---  - #SETTINGS.SetA2A_MGRS(): Enable the MGRS display formatting by default. Use #SETTINGS.SetMGRS_Accuracy() to adapt the accuracy of the MGRS formatting.
---  - #SETTINGS.SetA2A_LL_DMS(): Enable the LL DMS display formatting by default. Use #SETTINGS.SetLL_Accuracy() to adapt the accuracy of the Seconds formatting.
---  - #SETTINGS.SetA2A_LL_DDM(): Enable the LL DDM display formatting by default. Use #SETTINGS.SetLL_Accuracy() to adapt the accuracy of the Seconds formatting.
---  - #SETTINGS.SetA2A_BULLS(): Enable the BULLSeye display formatting by default.
---
---### 3.2.4) A2A coordinates settings - additional notes
---
---One additional note on BRAA. In a situation when a BRAA coordinate should be given,
---but there isn't any player context (no player unit to reference from), the MGRS formatting will be applied!
---
---## 3.3) **Measurements** formatting
---
---### 3.3.1) Measurements setting **types**
---
---Will customize the measurements system being used as part as part of the Command Center communications.
---
---  - **Metrics** system: Applies the [Metrics system](https://en.wikipedia.org/wiki/Metric_system) ...
---  - **Imperial** system: Applies the [Imperial system](https://en.wikipedia.org/wiki/Imperial_units) ...
---
---### 3.3.2) Measurements setting **menu**
---
---The settings can be changed by using the **Default settings menu** on the Command Center or the **Player settings menu** on the Player Slot.
---
---### 3.3.3) Measurements setting **methods**
---
---There are different methods that can be used to change the **Default settings** using the \_SETTINGS object.
---
---  - #SETTINGS.SetMetric(): Enable the Metric system.
---  - #SETTINGS.SetImperial(): Enable the Imperial system.
---
---## 3.4) **Message** display times
---
---### 3.4.1) Message setting **types**
---
---There are various **Message Types** that will influence the duration how long a message will appear as part of the Command Center communications.
---
---  - **Update** message: A short update message.
---  - **Information** message: Provides new information **while** executing a mission.
---  - **Briefing** message: Provides a complete briefing **before** executing a mission.
---  - **Overview report**: Provides a short report overview, the summary of the report.
---  - **Detailed report**: Provides a complete report.
---
---### 3.4.2) Message setting **menu**
---
---The settings can be changed by using the **Default settings menu** on the Command Center or the **Player settings menu** on the Player Slot.
---
---Each Message Type has specific timings that will be applied when the message is displayed.
---The Settings Menu will provide for each Message Type a selection of proposed durations from which can be chosen.
---So the player can choose its own amount of seconds how long a message should be displayed of a certain type.
---Note that **Update** messages can be chosen not to be displayed at all!
---
---### 3.4.3) Message setting **methods**
---
---There are different methods that can be used to change the **System settings** using the \_SETTINGS object.
---
---  - #SETTINGS.SetMessageTime(): Define for a specific Core.Message#MESSAGE.MessageType the duration to be displayed in seconds.
---  - #SETTINGS.GetMessageTime(): Retrieves for a specific Core.Message#MESSAGE.MessageType the duration to be displayed in seconds.
---
---## 3.5) **Era** of the battle
---
---The threat level metric is scaled according the era of the battle. A target that is AAA, will pose a much greater threat in WWII than on modern warfare.
---Therefore, there are 4 era that are defined within the settings:
---
---  - **WWII** era: Use for warfare with equipment during the world war II time.
---  - **Korea** era: Use for warfare with equipment during the Korea war time.
---  - **Cold War** era: Use for warfare with equipment during the cold war time.
---  - **Modern** era: Use for warfare with modern equipment in the 2000s.
---
---There are different API defined that you can use with the _SETTINGS object to configure your mission script to work in one of the 4 era:
---#SETTINGS.SetEraWWII(), #SETTINGS.SetEraKorea(), #SETTINGS.SetEraCold(), #SETTINGS.SetEraModern()
---
---===
---@class SETTINGS : BASE
---@field A2ASystem string 
---@field A2GSystem string 
---@field Era NOTYPE 
---@field LL_Accuracy NOTYPE 
---@field MGRS_Accuracy NOTYPE 
---@field Metric NOTYPE 
---@field PlayerMenu NOTYPE 
---@field ShowPlayerMenu boolean 
---@field __Enum table 
SETTINGS = {}


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param A2ASystem NOTYPE 
function SETTINGS:A2AMenuSystem(MenuGroup, RootMenu, A2ASystem) end


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param A2GSystem NOTYPE 
function SETTINGS:A2GMenuSystem(MenuGroup, RootMenu, A2GSystem) end

---Gets the SETTINGS LL accuracy.
---
------
---@param self SETTINGS 
---@return number #
function SETTINGS:GetLL_DDM_Accuracy() end

---Gets the SETTINGS text locale.
---
------
---@param self SETTINGS 
---@return string #
function SETTINGS:GetLocale() end

---Gets the SETTINGS MGRS accuracy.
---
------
---@param self SETTINGS 
---@return number #
function SETTINGS:GetMGRS_Accuracy() end

---Gets the SETTINGS Message Display Timing of a MessageType
---
------
---@param self SETTINGS 
---@param MessageType MESSAGE The type of the message.
---@return number #
function SETTINGS:GetMessageTime(MessageType) end

---Is BRA
---
------
---@param self SETTINGS 
---@return boolean #true if BRA
function SETTINGS:IsA2A_BRAA() end

---Is BULLS
---
------
---@param self SETTINGS 
---@return boolean #true if BULLS
function SETTINGS:IsA2A_BULLS() end

---Is LL DDM
---
------
---@param self SETTINGS 
---@return boolean #true if LL DDM
function SETTINGS:IsA2A_LL_DDM() end

---Is LL DMS
---
------
---@param self SETTINGS 
---@return boolean #true if LL DMS
function SETTINGS:IsA2A_LL_DMS() end

---Is MGRS
---
------
---@param self SETTINGS 
---@return boolean #true if MGRS
function SETTINGS:IsA2A_MGRS() end

---Is BRA
---
------
---@param self SETTINGS 
---@return boolean #true if BRA
function SETTINGS:IsA2G_BR() end

---Is LL DDM
---
------
---@param self SETTINGS 
---@return boolean #true if LL DDM
function SETTINGS:IsA2G_LL_DDM() end

---Is LL DMS
---
------
---@param self SETTINGS 
---@return boolean #true if LL DMS
function SETTINGS:IsA2G_LL_DMS() end

---Is MGRS
---
------
---@param self SETTINGS 
---@return boolean #true if MGRS
function SETTINGS:IsA2G_MGRS() end

---Gets if the SETTINGS is imperial.
---
------
---@param self SETTINGS 
---@return boolean #true if imperial.
function SETTINGS:IsImperial() end

---Gets if the SETTINGS is metric.
---
------
---@param self SETTINGS 
---@return boolean #true if metric.
function SETTINGS:IsMetric() end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param A2ASystem NOTYPE 
function SETTINGS:MenuGroupA2ASystem(PlayerUnit, PlayerGroup, PlayerName, A2ASystem) end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param A2GSystem NOTYPE 
function SETTINGS:MenuGroupA2GSystem(PlayerUnit, PlayerGroup, PlayerName, A2GSystem) end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param LL_Accuracy NOTYPE 
function SETTINGS:MenuGroupLL_DDM_AccuracySystem(PlayerUnit, PlayerGroup, PlayerName, LL_Accuracy) end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param MGRS_Accuracy NOTYPE 
function SETTINGS:MenuGroupMGRS_AccuracySystem(PlayerUnit, PlayerGroup, PlayerName, MGRS_Accuracy) end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param MW NOTYPE 
function SETTINGS:MenuGroupMWSystem(PlayerUnit, PlayerGroup, PlayerName, MW) end


---
------
---@param self SETTINGS 
---@param PlayerUnit NOTYPE 
---@param PlayerGroup NOTYPE 
---@param PlayerName NOTYPE 
---@param MessageType NOTYPE 
---@param MessageTime NOTYPE 
function SETTINGS:MenuGroupMessageTimingsSystem(PlayerUnit, PlayerGroup, PlayerName, MessageType, MessageTime) end


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param LL_Accuracy NOTYPE 
function SETTINGS:MenuLL_DDM_Accuracy(MenuGroup, RootMenu, LL_Accuracy) end


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param MGRS_Accuracy NOTYPE 
function SETTINGS:MenuMGRS_Accuracy(MenuGroup, RootMenu, MGRS_Accuracy) end


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param MW NOTYPE 
function SETTINGS:MenuMWSystem(MenuGroup, RootMenu, MW) end


---
------
---@param self SETTINGS 
---@param MenuGroup NOTYPE 
---@param RootMenu NOTYPE 
---@param MessageType NOTYPE 
---@param MessageTime NOTYPE 
function SETTINGS:MenuMessageTimingsSystem(MenuGroup, RootMenu, MessageType, MessageTime) end

---Removes the player menu from the PlayerUnit.
---
------
---@param self SETTINGS 
---@param PlayerUnit CLIENT 
---@return SETTINGS #self
function SETTINGS:RemovePlayerMenu(PlayerUnit) end

---SETTINGS constructor.
---
------
---@param self SETTINGS 
---@param PlayerName? string (Optional) Set settings for this player.
---@return SETTINGS #
function SETTINGS:Set(PlayerName) end

---Sets A2A BRA
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2A_BRAA() end

---Sets A2A BULLS
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2A_BULLS() end

---Sets A2A LL DDM
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2A_LL_DDM() end

---Sets A2A LL DMS
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2A_LL_DMS() end

---Sets A2A MGRS
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2A_MGRS() end

---Sets A2G BRA
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2G_BR() end

---Sets A2G LL DDM
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2G_LL_DDM() end

---Sets A2G LL DMS
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2G_LL_DMS() end

---Sets A2G MGRS
---
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetA2G_MGRS() end

---Configures the era of the mission to be Cold war.
---
------
---@param self SETTINGS 
---@return SETTINGS #self
function SETTINGS:SetEraCold() end

---Configures the era of the mission to be Korea.
---
------
---@param self SETTINGS 
---@return SETTINGS #self
function SETTINGS:SetEraKorea() end

---Configures the era of the mission to be Modern war.
---
------
---@param self SETTINGS 
---@return SETTINGS #self
function SETTINGS:SetEraModern() end

---Configures the era of the mission to be WWII.
---
------
---@param self SETTINGS 
---@return SETTINGS #self
function SETTINGS:SetEraWWII() end

---Sets the SETTINGS imperial.
---
------
---@param self SETTINGS 
function SETTINGS:SetImperial() end

---Sets the SETTINGS LL accuracy.
---
------
---@param self SETTINGS 
---@param LL_Accuracy number 
---@return SETTINGS #
function SETTINGS:SetLL_Accuracy(LL_Accuracy) end

---Sets the SETTINGS default text locale.
---
------
---@param self SETTINGS 
---@param Locale string 
function SETTINGS:SetLocale(Locale) end

---Sets the SETTINGS MGRS accuracy.
---
------
---@param self SETTINGS 
---@param MGRS_Accuracy number 0 to 5
---@return SETTINGS #
function SETTINGS:SetMGRS_Accuracy(MGRS_Accuracy) end

---Set menu to be static.
---
------
---@param self SETTINGS 
---@param onoff boolean If *true* menu is static. If *false* menu will be updated after changes (default).
function SETTINGS:SetMenuStatic(onoff) end

---Set short text for menus on (*true*) or off (*false*).
---Short text are better suited for, e.g., VR.
---
------
---@param self SETTINGS 
---@param onoff boolean If *true* use short menu texts. If *false* long ones (default).
function SETTINGS:SetMenutextShort(onoff) end

---Sets the SETTINGS Message Display Timing of a MessageType
---
------
---@param self SETTINGS 
---@param MessageType MESSAGE The type of the message.
---@param MessageTime number The display time duration in seconds of the MessageType.
function SETTINGS:SetMessageTime(MessageType, MessageTime) end

---Sets the SETTINGS metric.
---
------
---@param self SETTINGS 
function SETTINGS:SetMetric() end

---Updates the menu of the player seated in the PlayerUnit.
---
------
---@param self SETTINGS 
---@param PlayerUnit CLIENT 
---@return SETTINGS #self
function SETTINGS:SetPlayerMenu(PlayerUnit) end

---Sets the player menus off, so that the **Player setting menus** won't show up for the players.
---But only when a player exits and reenters the slot these settings will have effect!
---It is advised to use this method at the start of the mission.
---
------
---
---USAGE
---```
---  _SETTINGS:SetPlayerMenuOff() -- will disable the player menus.
---```
------
---@param self SETTINGS 
---@return SETTINGS #self
function SETTINGS:SetPlayerMenuOff() end

---Sets the player menus on, so that the **Player setting menus** show up for the players.
---But only when a player exits and reenters the slot these settings will have effect!
---It is advised to use this method at the start of the mission.
---
------
---
---USAGE
---```
---  _SETTINGS:SetPlayerMenuOn() -- will enable the player menus.
---```
------
---@param self SETTINGS 
---@return SETTINGS #
function SETTINGS:SetPlayerMenuOn() end


---
------
---@param self SETTINGS 
---@param MenuGroup GROUP Group for which to add menus.
---@param RootMenu table Root menu table
---@return SETTINGS #
function SETTINGS:SetSystemMenu(MenuGroup, RootMenu) end


---@class SETTINGS.__Enum.Era 
---@field Cold number 
---@field Korea number 
---@field Modern number 
---@field WWII number 
SETTINGS.__Enum.Era = {}



